{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\src\\\\components\\\\Login\\\\Login.js\";\nimport React, { Component } from 'react';\nimport { Redirect, Route, withRouter } from 'react-router-dom';\nimport MainPage from '../MainPage/MainPage';\n\nvar uniqid = require('uniqid');\n\nvar axios = require('axios');\n\nvar serverUrl = 'http://192.168.1.4:3001/';\nvar insertedRoomid,\n    generatedUsername,\n    oldUsername = \"\";\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Login)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      username: \"\",\n      roomid: \"\",\n      newUserBttnClicked: false,\n      newRoomBttnClicked: false,\n      joinBttnClicked: false,\n      usernameExists: false\n    };\n\n    _this.newUserButton = function () {\n      if (_this.state.username !== \"\" || _this.state.username.length !== 0) {\n        //to insert a player row info in Player database\n        axios({\n          method: 'post',\n          url: serverUrl + 'players/create/' + _this.state.username.toString().replace(' ', '-'),\n          data: {\n            username: _this.state.username,\n            timeCreated: Date.now()\n          }\n        }).then(function (response) {\n          if (response.data === \"ok\") {\n            oldUsername = _this.state.username;\n\n            _this.setState({\n              newUserBttnClicked: true,\n              usernameExists: false\n            });\n          } else if (response.data === \"username exists\") {\n            _this.setState({\n              usernameExists: true,\n              newUserBttnClicked: false\n            });\n          }\n        }).catch(function (err) {\n          console.log(err);\n        });\n      } else {\n        _this.setState({\n          newUserBttnClicked: false\n        });\n      }\n    };\n\n    _this.newRoomButton = function () {\n      var roomid = uniqid();\n\n      _this.setState({\n        roomid: roomid\n      }); //to verify that the player's username is successfully created and stored in the database\n\n\n      axios({\n        method: 'get',\n        url: serverUrl + 'players/' + _this.state.username.toString().replace(' ', '-'),\n        responseType: 'text'\n      }).then(function (response) {\n        if (response.data === \"ok\") {\n          //to create a room id collection and update the rooomid field of current player's row in Rooms collections \n          // it will return a promise (axios is promise-based)\n          return axios({\n            method: 'post',\n            url: serverUrl + 'rooms/create-or-update/' + roomid,\n            data: {\n              roomid: roomid,\n              admin: _this.state.username,\n              timeCreated: Date.now(),\n              players: _this.state.username,\n              numberOfPlayers: 1\n            }\n          });\n        } else {\n          _this.setState({\n            newRoomBttnClicked: false\n          });\n        }\n      }).then(function (response) {\n        if (response.data === \"ok\") {\n          _this.setState({\n            newRoomBttnClicked: true\n          });\n        } else {\n          _this.setState({\n            newRoomBttnClicked: false\n          });\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    };\n\n    _this.joinButton =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var requests;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //to verify that the inserted room id and player's username exist    \n              requests = [{\n                method: 'get',\n                url: serverUrl + 'rooms/' + insertedRoomid\n              }, {\n                method: 'get',\n                url: serverUrl + 'players/' + _this.state.username.toString().replace(' ', '-')\n              }];\n              axios.all([axios.request(requests[0]).catch(function (err) {\n                return console.log(err);\n              }), axios.request(requests[1]).catch(function (err) {\n                return console.log(err);\n              })]).then(axios.spread(function (res1, res2) {\n                if (res1.data === \"ok\" && res2.data === \"ok\") {\n                  var _requests = [{\n                    method: 'post',\n                    url: serverUrl + 'rooms/' + insertedRoomid + '/update',\n                    data: {\n                      roomid: insertedRoomid,\n                      username: _this.state.username.toString().replace(' ', '-')\n                    }\n                  }, {\n                    method: 'post',\n                    url: serverUrl + 'players/' + _this.state.username.toString().replace(' ', '-') + '/update',\n                    data: {\n                      roomid: insertedRoomid,\n                      username: _this.state.username.toString().replace(' ', '-')\n                    }\n                  }];\n                  axios(_requests[0]).then(function (response) {\n                    if (response.data === \"ok\") return axios(_requests[1]);\n                  }).then(function (response) {\n                    if (response.data === \"ok\") _this.props.history.push(\"/main-page\");\n                  }).catch(function (err) {\n                    return console.log(err);\n                  });\n                }\n              })).catch(function (err) {\n                return console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.newUserBttnClicked) {\n        generatedUsername = this.state.username;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"Login-page-cover\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Login-page-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Login title\")), React.createElement(\"div\", {\n        className: \"Login-page-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"username \"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"player_username\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            username: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.newUserButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"create new username\"), this.state.newUserBttnClicked ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Username created successfully\") : this.state.usernameExists ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"username already exists\") : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"please enter a name\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"If you want to generate a new play room, click the following button \"), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.newRoomButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"create new room\"), this.state.newRoomBttnClicked ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"New room created, here is the room id: \", this.state.roomid) : null, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"if you already have the generated room id, please type to join \"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"player_roomid\",\n        id: \"player_roomid\",\n        onChange: function onChange(e) {\n          return insertedRoomid = e.target.value;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.joinButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"join\")));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport default Login;","map":{"version":3,"sources":["E:\\Werewolf\\werewolf_01\\client\\src\\components\\Login\\Login.js"],"names":["React","Component","Redirect","Route","withRouter","MainPage","uniqid","require","axios","serverUrl","insertedRoomid","generatedUsername","oldUsername","Login","state","username","roomid","newUserBttnClicked","newRoomBttnClicked","joinBttnClicked","usernameExists","newUserButton","length","method","url","toString","replace","data","timeCreated","Date","now","then","response","setState","catch","err","console","log","newRoomButton","responseType","admin","players","numberOfPlayers","joinButton","requests","all","request","spread","res1","res2","props","history","push","prevProps","prevState","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Redirect, Route, withRouter } from 'react-router-dom'\r\n\r\nimport MainPage from '../MainPage/MainPage'\r\n\r\nconst uniqid = require('uniqid')\r\nconst axios = require('axios')\r\n\r\nconst serverUrl = 'http://192.168.1.4:3001/'\r\n\r\nlet insertedRoomid,\r\n    generatedUsername,\r\n    oldUsername = \"\"\r\n\r\n\r\nclass Login extends Component{\r\n    state={\r\n        username: \"\",\r\n        roomid: \"\",\r\n        newUserBttnClicked: false,\r\n        newRoomBttnClicked: false,\r\n        joinBttnClicked: false,\r\n        usernameExists: false\r\n    }\r\n\r\n    newUserButton = () => {\r\n        if(this.state.username !== \"\" || this.state.username.length !== 0){\r\n\r\n            //to insert a player row info in Player database\r\n            axios({\r\n                method: 'post',\r\n                url: serverUrl + 'players/create/' + this.state.username.toString().replace(' ', '-'),\r\n                data: {\r\n                    username: this.state.username,\r\n                    timeCreated: Date.now()\r\n                }\r\n            })\r\n            .then(response => {\r\n                if(response.data === \"ok\"){\r\n                    oldUsername = this.state.username\r\n                    this.setState({\r\n                        newUserBttnClicked: true,\r\n                        usernameExists: false\r\n                    })\r\n                }\r\n                \r\n                else if (response.data === \"username exists\"){\r\n                    this.setState({\r\n                        usernameExists: true,\r\n                        newUserBttnClicked: false\r\n                    })\r\n                }\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n        }\r\n\r\n        else{\r\n            this.setState({\r\n                newUserBttnClicked: false\r\n            })\r\n        }\r\n    }\r\n\r\n    newRoomButton = () => {\r\n        var roomid = uniqid()\r\n\r\n        this.setState({\r\n            roomid: roomid\r\n        })\r\n\r\n        //to verify that the player's username is successfully created and stored in the database\r\n        axios({\r\n            method: 'get',\r\n            url: serverUrl + 'players/' + this.state.username.toString().replace(' ', '-'),\r\n            responseType: 'text'\r\n        })\r\n        .then(response => {\r\n            if(response.data === \"ok\"){\r\n\r\n                 \r\n                //to create a room id collection and update the rooomid field of current player's row in Rooms collections \r\n                // it will return a promise (axios is promise-based)\r\n                return axios({\r\n                    method: 'post',\r\n                    url: serverUrl + 'rooms/create-or-update/' + roomid,\r\n                    data: {\r\n                        roomid: roomid,\r\n                        admin: this.state.username,\r\n                        timeCreated: Date.now(),\r\n                        players: this.state.username,\r\n                        numberOfPlayers: 1\r\n                    }\r\n                })\r\n                \r\n            }\r\n\r\n            else{\r\n                this.setState(\r\n                {\r\n                    newRoomBttnClicked  : false\r\n                })\r\n            }\r\n        })\r\n        .then(response => {\r\n            if(response.data === \"ok\"){\r\n                this.setState(\r\n                {\r\n                    newRoomBttnClicked  : true\r\n                })\r\n            }\r\n\r\n            else{\r\n                this.setState(\r\n                {\r\n                    newRoomBttnClicked  : false\r\n                })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    joinButton = async () =>{\r\n        //to verify that the inserted room id and player's username exist    \r\n\r\n        let requests = [{\r\n            method: 'get',\r\n            url: serverUrl + 'rooms/' + insertedRoomid\r\n        }, \r\n        {\r\n            method: 'get',\r\n            url: serverUrl + 'players/' + this.state.username.toString().replace(' ', '-')\r\n        }]\r\n\r\n        axios.all([\r\n            axios.request(requests[0]).catch(err => console.log(err)),\r\n            axios.request(requests[1]).catch(err => console.log(err))\r\n        ])\r\n        .then(axios.spread((res1, res2) => {\r\n            if(res1.data === \"ok\" && res2.data === \"ok\"){   \r\n                let requests = [{\r\n                    method: 'post',\r\n                    url: serverUrl + 'rooms/' + insertedRoomid + '/update',\r\n                    data: {\r\n                        roomid: insertedRoomid,\r\n                        username: this.state.username.toString().replace(' ', '-')\r\n                    }\r\n                }, \r\n                {\r\n                    method: 'post',\r\n                    url: serverUrl + 'players/' + this.state.username.toString().replace(' ', '-') + '/update',\r\n                    data: {\r\n                        roomid: insertedRoomid,\r\n                        username: this.state.username.toString().replace(' ', '-')\r\n                    }\r\n                }]\r\n\r\n                axios(requests[0])\r\n                .then(response => {\r\n                    if(response.data === \"ok\")\r\n                        return axios(requests[1])\r\n                })\r\n                .then(response => {\r\n                    if(response.data === \"ok\")\r\n                        this.props.history.push(`/main-page`)\r\n                })\r\n                .catch(err => console.log(err))\r\n            }\r\n        }))\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.newUserBttnClicked){\r\n            generatedUsername = this.state.username\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Login-page-cover\">\r\n                <div className=\"Login-page-title\">\r\n                    <h2>Login title</h2>\r\n                </div>\r\n                <div className=\"Login-page-body\">\r\n                    <label>username </label>\r\n                    <input type=\"text\" name=\"player_username\" onChange={e => this.setState({username: e.target.value})}/>\r\n                    <button type=\"button\" onClick={this.newUserButton}>create new username</button>\r\n\r\n                    {this.state.newUserBttnClicked ? \r\n                        <p>Username created successfully</p>\r\n                        :\r\n                        (\r\n                            this.state.usernameExists ?\r\n                                \r\n                                <p>username already exists</p>\r\n\r\n                                :\r\n\r\n                                <p>please enter a name</p>\r\n                        )   \r\n                    }\r\n                    <br></br>\r\n\r\n                    <label>If you want to generate a new play room, click the following button </label>\r\n                    <button type=\"button\" onClick={this.newRoomButton}>create new room</button>\r\n\r\n                    {this.state.newRoomBttnClicked ? \r\n                        <p>New room created, here is the room id: {this.state.roomid}</p>\r\n                        :\r\n                        null\r\n                    }\r\n                    <br></br>\r\n\r\n                    <label>if you already have the generated room id, please type to join </label>\r\n                    <input type=\"text\" name=\"player_roomid\" id=\"player_roomid\" onChange={e => insertedRoomid = e.target.value}/>\r\n                    <button type=\"button\" onClick={this.joinButton}>join</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login"]},"metadata":{},"sourceType":"module"}