{"ast":null,"code":"import _classCallCheck from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\Werewolf\\\\werewolf_01\\\\client\\\\src\\\\components\\\\Login\\\\Login.js\";\nimport React, { Component } from 'react';\nimport Cookies from 'universal-cookie';\nimport MainPage from '../MainPage/MainPage';\n\nvar uniqid = require('uniqid');\n\nvar axios = require('axios');\n\nvar cookies = new Cookies();\nvar serverUrl = 'http://192.168.1.4:3001/';\nvar insertedRoomid,\n    generatedUsername = \"\",\n    roomid,\n    oldUsername = \"\";\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Login)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      username: \"\",\n      roomid: \"\",\n      newUserBttnClicked: false,\n      newRoomBttnClicked: false,\n      joinBttnClicked: false,\n      usernameExists: false\n    };\n\n    _this.newUserButton = function () {\n      if (_this.state.username !== \"\" || _this.state.username.length !== 0) {\n        //to insert a player row info in Player database\n        axios({\n          method: 'post',\n          url: serverUrl + 'players/create-or-update/' + _this.state.username.toString().replace(' ', '-'),\n          data: {\n            username: _this.state.username,\n            roomid: roomid,\n            timeCreated: Date.now(),\n            oldUsername: oldUsername\n          }\n        }).then(function (response) {\n          if (response.data === \"ok\") {\n            oldUsername = _this.state.username;\n\n            _this.setState({\n              newUserBttnClicked: true,\n              usernameExists: false\n            });\n          } else if (response.data === \"username exists\") {\n            _this.setState({\n              usernameExists: true,\n              newUserBttnClicked: false\n            });\n          }\n        }).catch(function (err) {\n          console.log(err);\n        });\n      } else {\n        _this.setState({\n          newUserBttnClicked: false\n        });\n      }\n    };\n\n    _this.newRoomButton = function () {\n      roomid = uniqid();\n\n      _this.setState({\n        roomid: roomid\n      }); //to verify that the player's username is successfully created and stored in the database\n\n\n      axios({\n        method: 'get',\n        url: serverUrl + 'players/' + generatedUsername.toString().replace(' ', '-'),\n        responseType: 'text'\n      }).then(function (response) {\n        if (response.data === \"ok\" && _this.state.newUserBttnClicked) {\n          //to create a room id collection and update the rooomid field of current player's row in Rooms collections \n          // it will return a promise (axios is promise-based)\n          return axios({\n            method: 'post',\n            url: serverUrl + 'rooms/create-or-update/' + roomid,\n            data: {\n              roomid: roomid,\n              admin: generatedUsername,\n              timeCreated: Date.now(),\n              players: generatedUsername,\n              numberOfPlayers: 1\n            }\n          });\n        } else {\n          _this.setState({\n            newRoomBttnClicked: false\n          });\n        }\n      }).then(function (response) {\n        if (response.data === \"ok\") {\n          _this.setState({\n            newRoomBttnClicked: true\n          });\n\n          setInterval(function () {\n            _this.props.history.push(\"/main-page/\" + roomid);\n          }, 5000);\n        } else {\n          _this.setState({\n            newRoomBttnClicked: false\n          });\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    };\n\n    _this.joinButton = function () {\n      //to verify that the inserted room id and player's username exist    \n      var requests = [{\n        method: 'get',\n        url: serverUrl + 'rooms/' + insertedRoomid\n      }, {\n        method: 'get',\n        url: serverUrl + 'players/' + generatedUsername.toString().replace(' ', '-')\n      }, {\n        method: 'get',\n        url: serverUrl + 'handle-cookies',\n        params: {\n          roomid: insertedRoomid,\n          username: generatedUsername\n        }\n      }];\n      axios.all([axios.request(requests[0]).catch(function (err) {\n        return console.log(err);\n      }), axios.request(requests[1]).catch(function (err) {\n        return console.log(err);\n      }), axios.request(requests[2]).catch(function (err) {\n        return console.log(err);\n      })]).then(axios.spread(function (res1, res2, res3) {\n        //if responses from above 2 GET are both \"ok\" and the player have successfully created a username, then proceed\n        if (res1.data === \"ok\" && res2.data === \"ok\" && _this.state.newUserBttnClicked) {\n          var _requests = [{\n            method: 'post',\n            url: serverUrl + 'rooms/' + insertedRoomid + '/update',\n            data: {\n              roomid: insertedRoomid,\n              username: generatedUsername\n            }\n          }, {\n            method: 'post',\n            url: serverUrl + 'players/' + generatedUsername.toString().replace(' ', '-') + '/update',\n            data: {\n              roomid: insertedRoomid,\n              username: generatedUsername\n            }\n          }];\n          axios(_requests[0]).then(function (response) {\n            if (response.data === \"ok\") return axios(_requests[1]);\n          }).then(function (response) {\n            if (response.data === \"ok\") {\n              cookies.set('userInfo', data, {\n                path: '/'\n              });\n\n              _this.props.history.push(\"/main-page/\" + insertedRoomid + \"/\" + generatedUsername);\n            }\n          }).catch(function (err) {\n            return console.log(err);\n          });\n        }\n      })).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.newUserBttnClicked) {\n        generatedUsername = this.state.username;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"Login-page-cover\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Login-page-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Login title\")), React.createElement(\"div\", {\n        className: \"Login-page-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"username \"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"player_username\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            username: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.newUserButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"create new username\"), this.state.newUserBttnClicked ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \"Username created successfully\") : this.state.usernameExists ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \"username already exists\") : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"please enter a name\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"If you want to generate a new play room, click the following button \"), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.newRoomButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"create new room and go\"), this.state.newRoomBttnClicked ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \"New room created, here is the room id: \", this.state.roomid) : null, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"if you already have the generated room id, please type to join \"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"player_roomid\",\n        id: \"player_roomid\",\n        onChange: function onChange(e) {\n          return insertedRoomid = e.target.value;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.joinButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"join\")));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport default Login;","map":{"version":3,"sources":["E:\\Werewolf\\werewolf_01\\client\\src\\components\\Login\\Login.js"],"names":["React","Component","Cookies","MainPage","uniqid","require","axios","cookies","serverUrl","insertedRoomid","generatedUsername","roomid","oldUsername","Login","state","username","newUserBttnClicked","newRoomBttnClicked","joinBttnClicked","usernameExists","newUserButton","length","method","url","toString","replace","data","timeCreated","Date","now","then","response","setState","catch","err","console","log","newRoomButton","responseType","admin","players","numberOfPlayers","setInterval","props","history","push","joinButton","requests","params","all","request","spread","res1","res2","res3","set","path","prevProps","prevState","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Cookies from 'universal-cookie'\r\n\r\nimport MainPage from '../MainPage/MainPage'\r\n\r\nconst uniqid = require('uniqid')\r\nconst axios = require('axios')\r\nconst cookies = new Cookies()\r\nconst serverUrl = 'http://192.168.1.4:3001/'\r\n\r\nlet insertedRoomid,\r\n    generatedUsername = \"\",\r\n    roomid,\r\n    oldUsername = \"\"\r\n\r\n\r\nclass Login extends Component{\r\n    state={\r\n        username: \"\",\r\n        roomid: \"\",\r\n        newUserBttnClicked: false,\r\n        newRoomBttnClicked: false,\r\n        joinBttnClicked: false,\r\n        usernameExists: false\r\n    }\r\n\r\n    newUserButton = () => {\r\n        if(this.state.username !== \"\" || this.state.username.length !== 0){\r\n            //to insert a player row info in Player database\r\n            axios({\r\n                method: 'post',\r\n                url: serverUrl + 'players/create-or-update/' + this.state.username.toString().replace(' ', '-'),\r\n                data: {\r\n                    username: this.state.username,\r\n                    roomid: roomid,\r\n                    timeCreated: Date.now(),\r\n                    oldUsername: oldUsername\r\n                }\r\n            })\r\n            .then(response => {\r\n                if(response.data === \"ok\"){\r\n                    oldUsername = this.state.username\r\n\r\n\r\n                    this.setState({\r\n                        newUserBttnClicked: true,\r\n                        usernameExists: false\r\n                    })\r\n                }\r\n                \r\n                else if (response.data === \"username exists\"){\r\n                    this.setState({\r\n                        usernameExists: true,\r\n                        newUserBttnClicked: false\r\n                    })\r\n                }\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n        }\r\n\r\n        else{\r\n            this.setState({\r\n                newUserBttnClicked: false\r\n            })\r\n        }\r\n    }\r\n\r\n    newRoomButton = () => {\r\n        roomid = uniqid()\r\n\r\n        this.setState({\r\n            roomid: roomid\r\n        })\r\n\r\n        //to verify that the player's username is successfully created and stored in the database\r\n        axios({\r\n            method: 'get',\r\n            url: serverUrl + 'players/' + generatedUsername.toString().replace(' ', '-'),\r\n            responseType: 'text'\r\n        })\r\n        .then(response => {\r\n            if(response.data === \"ok\" && this.state.newUserBttnClicked){\r\n\r\n                //to create a room id collection and update the rooomid field of current player's row in Rooms collections \r\n                // it will return a promise (axios is promise-based)\r\n                return axios({\r\n                    method: 'post',\r\n                    url: serverUrl + 'rooms/create-or-update/' + roomid,\r\n                    data: {\r\n                        roomid: roomid,\r\n                        admin: generatedUsername,\r\n                        timeCreated: Date.now(),\r\n                        players: generatedUsername,\r\n                        numberOfPlayers: 1\r\n                    }\r\n                })\r\n                \r\n            }\r\n\r\n            else{\r\n                this.setState(\r\n                {\r\n                    newRoomBttnClicked  : false\r\n                })\r\n            }\r\n        })\r\n        .then(response => {\r\n            if(response.data === \"ok\"){\r\n                this.setState(\r\n                {\r\n                    newRoomBttnClicked  : true\r\n                })\r\n\r\n                setInterval(() => {\r\n                    this.props.history.push(`/main-page/` + roomid)\r\n                }, 5000)\r\n            }\r\n\r\n            else{\r\n                this.setState(\r\n                {\r\n                    newRoomBttnClicked  : false\r\n                })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    joinButton = () =>{\r\n        //to verify that the inserted room id and player's username exist    \r\n        let requests = [{\r\n            method: 'get',\r\n            url: serverUrl + 'rooms/' + insertedRoomid\r\n        }, \r\n        {\r\n            method: 'get',\r\n            url: serverUrl + 'players/' + generatedUsername.toString().replace(' ', '-')\r\n        },\r\n        {\r\n            method: 'get',\r\n            url: serverUrl + 'handle-cookies',\r\n            params: {\r\n                roomid: insertedRoomid,\r\n                username: generatedUsername\r\n            }\r\n        }]\r\n        \r\n\r\n        axios.all([\r\n            axios.request(requests[0]).catch(err => console.log(err)),\r\n            axios.request(requests[1]).catch(err => console.log(err)),\r\n            axios.request(requests[2]).catch(err => console.log(err))\r\n        ])\r\n        .then(axios.spread((res1, res2, res3) => {\r\n\r\n            //if responses from above 2 GET are both \"ok\" and the player have successfully created a username, then proceed\r\n            if(res1.data === \"ok\" && res2.data === \"ok\" && this.state.newUserBttnClicked){   \r\n                let requests = [{\r\n                    method: 'post',\r\n                    url: serverUrl + 'rooms/' + insertedRoomid + '/update',\r\n                    data: {\r\n                        roomid: insertedRoomid,\r\n                        username: generatedUsername\r\n                    }\r\n                }, \r\n                {\r\n                    method: 'post',\r\n                    url: serverUrl + 'players/' + generatedUsername.toString().replace(' ', '-') + '/update',\r\n                    data: {\r\n                        roomid: insertedRoomid,\r\n                        username: generatedUsername\r\n                    }\r\n                }]\r\n\r\n                axios(requests[0])\r\n                .then(response => {\r\n                    if(response.data === \"ok\")\r\n                        return axios(requests[1])\r\n                })\r\n                .then(response => {\r\n                    if(response.data === \"ok\"){\r\n                        cookies.set('userInfo', data, { path: '/' })\r\n                        this.props.history.push(`/main-page/` + insertedRoomid + `/`  + generatedUsername)\r\n                    }\r\n                })\r\n                .catch(err => console.log(err))\r\n            }\r\n        }))\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.newUserBttnClicked){\r\n            generatedUsername = this.state.username\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Login-page-cover\">\r\n                <div className=\"Login-page-title\">\r\n                    <h2>Login title</h2>\r\n                </div>\r\n                <div className=\"Login-page-body\">\r\n                    <label>username </label>\r\n                    <input type=\"text\" name=\"player_username\" onChange={e => this.setState({username: e.target.value})}/>\r\n                    <button type=\"button\" onClick={this.newUserButton}>create new username</button>\r\n\r\n                    {this.state.newUserBttnClicked ? \r\n                        <p>Username created successfully</p>\r\n                        :\r\n                        (\r\n                            this.state.usernameExists ?\r\n                                \r\n                                <p>username already exists</p>\r\n\r\n                                :\r\n\r\n                                <p>please enter a name</p>\r\n                        )   \r\n                    }\r\n                    <br></br>\r\n\r\n                    <label>If you want to generate a new play room, click the following button </label>\r\n                    <button type=\"button\" onClick={this.newRoomButton}>create new room and go</button>\r\n\r\n                    {this.state.newRoomBttnClicked ? \r\n                        <p>New room created, here is the room id: {this.state.roomid}</p>\r\n                        :\r\n                        null\r\n                    }\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <label>if you already have the generated room id, please type to join </label>\r\n                    <input type=\"text\" name=\"player_roomid\" id=\"player_roomid\" onChange={e => insertedRoomid = e.target.value}/>\r\n                    <button type=\"button\" onClick={this.joinButton}>join</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login"]},"metadata":{},"sourceType":"module"}